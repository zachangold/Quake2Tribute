//---------------------------------------------------------------------------

#ifndef EntityH
#define EntityH


#include "BSPCommon.h"
#include "BSPTree.h"
#include "Light.h"

#define NUM_MONSTER_TYPES 3
typedef struct {
    char *dirName;
    char *skinName;
} MonsterInfo;

/**
 * The following set of classes are all based on loading in the entity lump of
 * a BSP File, and are therefore put into the Entity namespace. All of these
 * classes must be accessed by using "Entity::" as a prefix to the classname.
 */
namespace Entity {

    //MonsterInfo monsterInfo[ NUM_MONSTER_TYPES ];

    /**
     * The entity Line class is a simple entry in the entity lump.
     * An entry consists of two tokens: the first is an identifier, and the
     * second is its value.
     */
    class Line {
        public:            /**             * Constructor that nulls out the pointers in the object, preparing             * it for later.             */            Line();            /**             * Destructor that makes sure that all memory is de-allocated             */            ~Line();            /**             * Parser that loads in the line pointed to by parameter line, storing             * the identifier and value in the according fields.             */            void parse( char *line );            /**             * Method that deallocates the identifier and the value character strings.             */            void free();            /**             * Tests to see if two identifiers are the same. (The first identifier is             * stored in field identifier, and the second is the parameter other)             */            bool identifierMatch( char *other );            /**             * Method that simply returns the value string that was loaded in earlier.             */            char *getValue() {                return value;            };        private:            /**             * Function that returns the length (in characters) of the token pointed             * to by parameter token. A token is just a "word", and is separated by             * double quotes ( " )             */            int tokenLength( char *token );            // The identifier and value parts of the line            char *identifier;            char *value;    };    /**     * The Entity class loads in and handles an entity declaration. An entity     * declaration is a set of EntityLines separated within brace brackets ({}).     * The Entity class also allows for specific values to be found, for example,     * the position and colour of a light.     */    class Entity {        public:            // Empty Constructor does nothing            Entity() {};            /**             * Destructor makes sure that the lines have been deallocated             */            ~Entity();            /**             * Parses an entire entity declaration, creating entity lines as it             * goes along. Returns a pointer to the next entity to be loaded.             */            char *parse( char *entity );            /**             * Returns the value of the line that has the same identifier as             * the identifier parameter             */            char *getValue( char *identifier );            /**             * Verifies if this entity is a light or not. Lights are handled in             * a special way to assist in world lighting.             */            bool isLight();            /**             * Returns the position of an entity in the form of a Point3f             */            Point3f getOrigin();            /**             * Returns the colour of an entity (usually a light) in the form of a Point3f             */            Point3f getColor();            /**             * Deletes all of the memory allocated by this Entity object.             */            void free();        private:            // The Lines in the Entity declaration            vector< Line * > lines;    };    /**     * A light that has been found in the Entity section of a BSP Map is referred     * to as an Entity::Light. Entity lights are handled differently from a regular     * light in that they have to reference from an Entity declaration for their properties.     */    class Light {        public:            /**             * Constructor that sets all pointer to NULL, preparing the object for later             */            Light() {                light = NULL;            };            /**             * Destructor that deletes any memory allocated.             */            ~Light() {                if ( light != NULL ) {                    delete light;                }            };            /**             * Loads in a light from the entity pointed to by parameter entity             */            void load( Entity *entity );            /**             * Enables this light with DirectX             */            void setEnableState( LPDIRECT3DDEVICE9 device, int lightNum );            /**             * Returns the distance from point pos. This is for enabling the closest             * lights to a point.             */            float getDistFromPoint( Point3f pos );        private:            // The Direct3D light object            D3D::Light *light;    };    /**     * Entity::Monster class keeps track of the monster entities in the BSP Map.     *     */    class Monster {        public:            Monster() {                baseEntity = NULL;                origin = getPoint( 0, 0, 0 );            };            ~Monster() {};            Point3f getOrigin() {                return origin;            };            void init( Entity *baseEntity ) {                this->baseEntity = baseEntity;                origin = baseEntity->getOrigin();            };        private:            Point3f origin;            Entity *baseEntity;    };    /**     * The Parser class is the main class for loading in the entity lump of a bsp file.     * It loads Entity::Entities, which in turn load in Entity::Lines. The entities     * define everything that exists within the map, including lights, monsters,     * paths, and more.     */    class Parser {        public:            // Empty constructor does nothing            Parser() {};            // Destructor unloads all allocated memory.            ~Parser() {                unload();            };            /**             * load() method loads in all entity data from the BSP map file.             */            void load( BSP::Header *header, FILE *mapFile );            /**             * unload() method deletes all entity data that was created by load()             */            void unload();            /**             * enableLights() method enables the eight closest lights             * to parameter pos             */            void enableLights( LPDIRECT3DDEVICE9 device, Point3f pos );            /**             * Returns the name of the skybox, found with the first entity.             */            char *getSkyBoxName();            /**             * Sets the position of the camera to the player's spawn point             */            void setCameraPos( Camera *camera );            vector< Monster * > *getMonsters() {                return &monsters;            };        private:            // The entities that were loaded in from the map's entity lump            vector< Entity * > entities;            // The lights that were found in the map's entities            vector< Light * > lights;            vector< Monster * > monsters;    };};

//---------------------------------------------------------------------------
#endif
